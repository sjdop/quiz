#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('quiz:server');
//var http = require('http');

var fs = require('fs');
var https = require('https');

var options = {
  key: fs.readFileSync('certs/quiz-2015-key.pem').toString(),
  cert: fs.readFileSync('certs/quiz-2015-cert.pem').toString()
};


/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

//app.set('port', process.env.PORT || 3000);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

var serverSecure = https.createServer(options, app);
 serverSecure.listen(8443, function() {
   debug('Express server listening on port ' + serverSecure.address().port);
   console.log(serverSecure.address().port);
 });
serverSecure.on('error', onError);
serverSecure.on('listening', onListening);
/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + serverSecure.address().port);
}
